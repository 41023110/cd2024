<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習 41023110</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-21T05:09:06+08:00</updated><entry><title>2a-cd2024課程w12-15</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w12-15-41023110.html" rel="alternate"></link><published>2024-06-07T10:02:00+08:00</published><updated>2024-06-21T05:09:06+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-06-07:./2024-cd2024課程-w12-15-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;w12-任務一&lt;/h1&gt;
&lt;p&gt;使用Siwmens NX Journal設計專案，在其中可使用NXOpen程式執行儲存格式 。在使用軟體時建議使用英文介面，因為中文翻譯的介面並不明確。&lt;/p&gt;
&lt;p&gt;在設定選擇用語時，選擇Python方便後續網際上延伸編輯後續。&lt;/p&gt;
&lt;p&gt;組別分配網球平衡台零件繪製，並用NXOpen Python執行。之後試著把每個零件組合起來，並且做出啟動一個程式時全部的零組件可以在一程式域內快速組合起來。&lt;/p&gt;
&lt;h1&gt;w12-1遇到問題&lt;/h1&gt;
&lt;p&gt;在旋轉成型的零件上，在play程式時會遇到流程中斷的問題。&lt;/p&gt;
&lt;p&gt;但改良不使用旋轉成形的模組建立後，就不會有此問題。&lt;/p&gt;
&lt;h1&gt;w12-任務二&lt;/h1&gt;
&lt;p&gt;將分組倉儲設為評分子模組，直接在Repilt進行git clear、import跟git push過了。&lt;/p&gt;
&lt;p&gt;直接在倉儲做git submodule add+分組倉儲+組別，其為做子模組的方式。後續acp確認是否有丟上成功。&lt;/p&gt;
&lt;p&gt;後續試著子模組能否整合。&lt;/p&gt;
&lt;h1&gt;w12-2遇到問題&lt;/h1&gt;
&lt;p&gt;在組裝時會遇到結合過度約束的紅標，盡量更選使用讓最後成品顯示於干涉。&lt;/p&gt;
&lt;p&gt;還有尺寸的部分更改零件後，約束要刪除重新給定。&lt;/p&gt;
&lt;h1&gt;w12-任務三&lt;/h1&gt;
&lt;p&gt;進行足球機器人網際場景模擬，在cd2024 blog上下載去年的倉儲資料，並安裝跟改過的CoppeliaSim ipv6。&lt;/p&gt;
&lt;p&gt;要確認軟體內modules之connectivity的三個visualization stream、ws remote api server、zmq remote api server分別都是running的狀態。&lt;/p&gt;
&lt;p&gt;visualization stream是在瀏覽器上輸入埠號為23020的localhost可看到目前的模擬場景。&lt;/p&gt;
&lt;p&gt;開啟下載到的模擬場景，有兩個程式可以執行，分別judge.py與player.py。&lt;/p&gt;
&lt;h1&gt;w12-3遇到問題&lt;/h1&gt;
&lt;p&gt;在CoppeliaSim場景開啟後匯入機器人，在擺正機器人與定位不是很熟練。&lt;/p&gt;
&lt;p&gt;在給定位銷時不知道怎麼讓它約束在點上。&lt;/p&gt;
&lt;p&gt;後續模擬還在練習。&lt;/p&gt;</content><category term="w12-15-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w9-11</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w9-11-41023110.html" rel="alternate"></link><published>2024-05-03T16:36:00+08:00</published><updated>2024-06-21T05:08:46+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-05-03:./2024-cd2024課程-w9-11-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;


&lt;h1&gt;任務&lt;/h1&gt;
&lt;p&gt;倉儲與網站建立:
根據老師給予的2a各學員評分相關網站，取得老師所寫的程式，並詢問ChatGPT找出相應程式碼。&lt;/p&gt;
&lt;p&gt;將原本有74行的程式碼簡化至40幾行，保持功能一致。&lt;/p&gt;
&lt;p&gt;鋼球平衡台零組件繪圖:&lt;/p&gt;
&lt;p&gt;解壓縮Solvespace_model_2d_for_cd2024_w6.7z檔案中的零件，根據尺寸在NX中進行繪製。&lt;/p&gt;
&lt;p&gt;組裝過程中錄製並剪輯成13分鐘的影片，提供詳細步驟及組合圖&lt;/p&gt;
&lt;h1&gt;任務&lt;/h1&gt;
&lt;p&gt;協同產品設計實習課程專案
主要內容:利用Odoo PLM進行鋼球平衡台與綜合球賽機器人模擬系統的協同設計。
利用老師的程式碼與ChatGPT協助，簡化並保持結果一致。
撰寫各報告摘要並錄製零組件組裝影片。
使用Odoo PLM進行協同設計與翻譯，生成中英文並列的pdf檔案。
協同處理教學影片，整理逐字稿並完成期中自評。
安裝Siemens NX 1872，進行零組件繪圖與模擬。
使用Sourcetree管理倉儲，理解改版及解決衝突。
第七週摘要協同模式，第八週應用AI協助閱讀論文與整理資料，第十週完成實習任務。&lt;/p&gt;</content><category term="w9-11-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w7</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w7-41023110.html" rel="alternate"></link><published>2024-04-25T15:45:00+08:00</published><updated>2024-06-21T05:08:38+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-04-25:./2024-cd2024課程-w7-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;


&lt;h1&gt;w7 任務指派&lt;/h1&gt;
&lt;p&gt;每人負責不同週網誌文章的撰寫與統整，之後組長將所有組員的網誌文章整合到分組倉儲中。&lt;/p&gt;
&lt;h1&gt;w7 CoppeliaSim 環境中 IPv6 ZeroMQ Remote API Python 模擬任務&lt;/h1&gt;
&lt;p&gt;查找並說明如何在CoppeliaSim環境中，利用IPv6 ZeroMQ Remote API Python進行兩個自由度的鋼球平衡檯自動控制系統模擬。&lt;/p&gt;
&lt;p&gt;實際測試模擬環境，確保模擬系統的正確性和穩定性。&lt;/p&gt;
&lt;p&gt;整理並撰寫模擬過程與結果的報告，並將其納入分組倉儲的Markdown目錄中。&lt;/p&gt;
&lt;h1&gt;w7 使用工具&lt;/h1&gt;
&lt;p&gt;網誌管理與網際簡報:cmsimde_site: 利用Pelican管理使用者所建立的網誌，利用Reveal管理使用者所建立的網際簡報。&lt;/p&gt;
&lt;p&gt;內容管理方法:Python執行網頁編輯: 使用Replit、Codespaces、Gitpod及localhost四種方法進行。&lt;/p&gt;
&lt;p&gt;雲端作業:各自選擇合適的工具。&lt;/p&gt;
&lt;h1&gt;w7 作業協同設計&lt;/h1&gt;
&lt;p&gt;分組網站內容的協同:整合各學員子模組中的 config/content.htm 以及 markdown/*.md 檔案至分組網站中。&lt;/p&gt;
&lt;p&gt;報告內容的協同:使用Github Actions與近端MikTeX中的xelatex將.tex轉為pdf。&lt;/p&gt;
&lt;p&gt;產品設計的PLM協同:使用Odoo PLM模組進行協同管理。&lt;/p&gt;
&lt;p&gt;零組件設計的協同:Solvespace進行設計，使用Siemens NX 1872進行協同零組件繪圖設計。&lt;/p&gt;
&lt;h1&gt;w7 每週網誌管理過程&lt;/h1&gt;
&lt;p&gt;網誌撰寫與轉檔流程:&lt;/p&gt;
&lt;p&gt;各組員每週在 cd2024 倉儲中的 markdown 目錄編寫網誌文章。
經由Pelican轉檔至 blog 目錄中的超文件網誌。
確保 combined_markdown 目錄中的Markdown檔案命名不重複，Slug字串不可重複。&lt;/p&gt;
&lt;p&gt;使用Replit進行內容維護:&lt;/p&gt;
&lt;p&gt;組員可從Replit Connect至Github進行倉儲維護，但需OpenSSH管理權限來管理分組倉儲。&lt;/p&gt;</content><category term="w7-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w6</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w6-41023110.html" rel="alternate"></link><published>2024-04-22T14:18:00+08:00</published><updated>2024-06-21T05:08:35+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-04-22:./2024-cd2024課程-w6-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;


&lt;h1&gt;w6教學影片分組整理並自評&lt;/h1&gt;
&lt;p&gt;分組倉儲上w4.w6有個人負責與自評&lt;/p&gt;</content><category term="w6-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w5</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w5-41023110.html" rel="alternate"></link><published>2024-04-15T14:26:00+08:00</published><updated>2024-06-21T05:08:32+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-04-15:./2024-cd2024課程-w5-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;


&lt;h1&gt;w5教學內容為先前影片整理、分組網誌的統整&lt;/h1&gt;
&lt;p&gt;--影片製作&lt;/p&gt;
&lt;p&gt;影片剪輯後製流程:&lt;/p&gt;
&lt;p&gt;我們使用 CapCut 軟體來進行影片剪輯和後製工作。&lt;/p&gt;
&lt;p&gt;字幕處理:&lt;/p&gt;
&lt;p&gt;目前CapCut字幕只支援簡體中文，因此我們需要在翻譯後重新逐字更改翻錯的內容並將簡體字改成繁體字。
20分鐘以上的影片通常需要花費2-3小時以上的時間來剪輯。&lt;/p&gt;
&lt;p&gt;工作量分配:&lt;/p&gt;
&lt;p&gt;因人手不足，每個人至少需要剪輯8至9片影片。
剪完影片後需要將簡體中文字幕改成繁體中文。
剪輯完成的影片需要上傳至YouTube。如果影片超過20分鐘，YouTube會提示影片過長，需要將影片分成上下兩部。&lt;/p&gt;
&lt;h1&gt;w5網誌統整流程&lt;/h1&gt;
&lt;p&gt;文件整合:&lt;/p&gt;
&lt;p&gt;各組員每週的協同設計網誌文章放在個別的 cd2024 倉儲的 markdown 目錄中。
修改分組倉儲中的 pelicanconf.py，使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數，指定網誌統整目錄。
這樣可以在分組倉儲中納入所有組員在子模組中所編寫的協同網誌。&lt;/p&gt;
&lt;p&gt;設定操作:&lt;/p&gt;
&lt;p&gt;pelicanconf.py 中的程式設定段，將子模組中 markdown 目錄的 .md 檔案動態複製到分組倉儲中的 combined_directory。
避開分組倉儲與學員子模組倉儲中的 pages 目錄下的 .md 檔案。
再進行網誌轉檔，並將所產生的網誌超文件存入所設定的 blog 目錄。&lt;/p&gt;
&lt;p&gt;轉檔指令:&lt;/p&gt;
&lt;p&gt;設定完成後的網誌轉檔指令為：pelican -s local_publishconf.py，表示要利用 local_publishconf.py 的設定進行轉檔，且先前有關 pelicanconf.py 的設定也將導入執行。&lt;/p&gt;
&lt;p&gt;命名規則:&lt;/p&gt;
&lt;p&gt;各組員必須將個別的網誌 .md 檔案名稱加上前綴字串，例如： "學號_" 加上獨一無二的網誌 Slug 字串名稱。
Category 使用該組員的學號作為標示。
這樣在統整轉檔時，不會發生相同網誌文章檔案名稱衝突的錯誤，且從各分組網誌的 Categories 中即可找到各組員所編寫的所有網誌內容。&lt;/p&gt;
&lt;h1&gt;w5主要工作&lt;/h1&gt;
&lt;p&gt;*使用CapCut軟體進行影片剪輯，需手動將簡體字改成繁體字，20分鐘以上影片需花1小時以上剪輯。&lt;/p&gt;
&lt;p&gt;*上傳YouTube影片。&lt;/p&gt;
&lt;p&gt;*各組員的網誌文章需放在個別倉儲的 markdown 目錄中，並修改 pelicanconf.py 進行統整。&lt;/p&gt;
&lt;p&gt;*使用 pelicanconf.py 設定將 .md 檔案動態複製到 combined_directory，避開 pages 目錄。&lt;/p&gt;
&lt;p&gt;*轉檔指令為：pelican -s local_publishconf.py，需加上學號前綴及獨一無二的Slug字串。&lt;/p&gt;
&lt;p&gt;*確保每個網誌文章有獨立的Category標示，以便於檔案管理及查找。&lt;/p&gt;</content><category term="w5-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w4</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w4-41023110.html" rel="alternate"></link><published>2024-04-12T16:30:00+08:00</published><updated>2024-06-21T05:08:28+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-04-12:./2024-cd2024課程-w4-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引&lt;/p&gt;


&lt;h1&gt;w4-1 教學影片分組整理&lt;/h1&gt;
&lt;p&gt;w4 2a 分組任務
負責w3 a.b的影片
使用capcut編輯字幕與影片剪輯，把翻譯好的影片上傳到youtube並嵌入在txt，在記事本依檔照程序碼排版。上傳到組與個人downloads。&lt;/p&gt;</content><category term="w4-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w3</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w3-41023110.html" rel="alternate"></link><published>2024-03-15T18:02:00+08:00</published><updated>2024-06-21T05:08:24+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-03-15:./2024-cd2024課程-w3-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;w3 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料。&lt;/h1&gt;
&lt;p&gt;負責第三段 43-65page 由41023110 (introduction_orig.txt,&lt;/p&gt;
&lt;p&gt;使用了chatgpt與劍橋辭翻譯，並用word編排翻譯段落。&lt;/p&gt;
&lt;h1&gt;如何將 41123130 的個人倉儲設為 2a-midag2 分組倉儲的子模組&lt;/h1&gt;
&lt;p&gt;一.在 Replit 維護項目：&lt;/p&gt;
&lt;p&gt;Replit 綁定到你給它的賬號。&lt;/p&gt;
&lt;p&gt;在近端操作需先克隆，修改後再推回。&lt;/p&gt;
&lt;p&gt;二.確認權限：&lt;/p&gt;
&lt;p&gt;利用 SSH 確認是否有權限。&lt;/p&gt;
&lt;p&gt;權限在 cadlab 檔上的 putty.reg。&lt;/p&gt;
&lt;p&gt;若有實體權限，雙擊寫入，確認 PuTTY 有對應的 key 和 settings。&lt;/p&gt;
&lt;p&gt;三.克隆倉儲：&lt;/p&gt;
&lt;p&gt;設置 PuTTY settings，確認沒有設 proxy。&lt;/p&gt;
&lt;p&gt;確認 key 設置在外部可攜環境。&lt;/p&gt;
&lt;p&gt;確認連線後，將 key as push 到主態登錄檔 regedit 中的 current_root 下的 software 內。&lt;/p&gt;
&lt;p&gt;四.克隆倉儲到 C 槽：&lt;/p&gt;
&lt;p&gt;在 C 槽建立 tmp 資料夾：mkdir tmp。&lt;/p&gt;
&lt;p&gt;使用指令克隆倉儲：git clone --recurse-submodules ssh://對應賬號。&lt;/p&gt;
&lt;p&gt;五.設置子模組：&lt;/p&gt;
&lt;p&gt;進入倉儲目錄，抓取資料並添加：git add。&lt;/p&gt;
&lt;p&gt;使用 git submodule add 命令將個人課程倉儲添加為子模組。&lt;/p&gt;
&lt;p&gt;需使用 HTTPS 抓取子模組，因為分組倉儲沒有權限。&lt;/p&gt;
&lt;p&gt;六.處理子模組：&lt;/p&gt;
&lt;p&gt;將組員的倉儲抓下來，分段抓取未處理完的章節。&lt;/p&gt;
&lt;p&gt;推送更新：git push，並處理 .gitmodules 的衝突。&lt;/p&gt;
&lt;p&gt;這樣可以有效管理和維護分組倉儲。&lt;/p&gt;</content><category term="w3-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w2</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w2-41023110.html" rel="alternate"></link><published>2024-02-24T16:38:00+08:00</published><updated>2024-06-21T05:08:20+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-02-24:./2024-cd2024課程-w2-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;-1 說明甲班第一組組長如何建立 midag1 Team, 並利用 Codespaces 維護 2a-midag1 分組倉儲&lt;/h1&gt;
&lt;p&gt;終端機每個人每月都有120code小時。要push倉儲要新增終端機後，進行git add-&amp;gt;git commit"網頁標題"，執行後就會直接推上不需要在轉檔。啟動靜態要在新增終端機，有python3內建模組了就可以直接http.server直接啟動埠號，8000會自動開啟瀏覽器連結，就可以直接進入到靜態。用完codespaces要在關閉code讓計時暫停。&lt;/p&gt;
&lt;p&gt;利用 Codespaces 維護 :&lt;/p&gt;
&lt;p&gt;一.在 GitHub Classroom 中建立組別倉儲：&lt;/p&gt;
&lt;p&gt;a.組長在 "or create a new team" 處以 "midag X" 命名組別，然後點擊 "+create team" 創建。&lt;/p&gt;
&lt;p&gt;b.組員各自加入組別。&lt;/p&gt;
&lt;p&gt;二.完成倉儲建立後：&lt;/p&gt;
&lt;p&gt;a.前往倉儲的 settings 選取 pages 進入主分支，啟動 GitHub Pages。&lt;/p&gt;
&lt;p&gt;b.使用 Codespaces 維護內容。&lt;/p&gt;
&lt;p&gt;三.在 Codespaces 中：&lt;/p&gt;
&lt;p&gt;a.不需要使用公用的 443 埠號，有許多終端機和埠號資源可用。&lt;/p&gt;
&lt;p&gt;b.啟動終端機並安裝模組：執行 chmod u+x init_replit，安裝完成後會有 2GB 記憶體。&lt;/p&gt;
&lt;p&gt;c.使用 python3 main.py 執行動態應用，並使用 8080 埠號開啟瀏覽器。&lt;/p&gt;
&lt;p&gt;d.連結埠號會顯示亂碼，保證安全性。&lt;/p&gt;
&lt;p&gt;e.登入後可以更改內容。&lt;/p&gt;
&lt;h1&gt;-2 說明如何利用Replit管理從 Classroom 取得的分組倉儲&lt;/h1&gt;
&lt;p&gt;一.在 Replit 中建立網站：&lt;/p&gt;
&lt;p&gt;a.使用 from url 導入資料，改成 Python 模式並 import 到分組倉儲，但在 Replit 上無法直接維護分組倉儲。&lt;/p&gt;
&lt;p&gt;二.生成 SSH 密鑰：&lt;/p&gt;
&lt;p&gt;a.在 shell 中執行 ssh-keygen，跟 s.cycu 相同。&lt;/p&gt;
&lt;p&gt;b.執行 pwd 確認倉儲位置在 home/runner 下。&lt;/p&gt;
&lt;p&gt;c.使用 cd ../ 切換到 runner 目錄，執行 ls -l 查看 pub 鍵。&lt;/p&gt;
&lt;p&gt;三.建立個人 ID：&lt;/p&gt;
&lt;p&gt;a.確認有 putty，新增 SSH 並複製 import 資料。&lt;/p&gt;
&lt;p&gt;b.打開 puttygen.exe，生成亂數，複製內容到組長倉儲的 settings。&lt;/p&gt;
&lt;p&gt;c.將 ID 存在 settings 和 .ssh 目錄中。&lt;/p&gt;
&lt;p&gt;這樣就可以載入並顯示 pub key。&lt;/p&gt;
&lt;h1&gt;-3 如何利用近端可攜環境與外部 IPv4 開啟動態網站。&lt;/h1&gt;
&lt;p&gt;一.使用 SSH 啟動並克隆倉儲：&lt;/p&gt;
&lt;p&gt;a.使用 PuTTY 進入 Replit，沒有任何 settings。&lt;/p&gt;
&lt;p&gt;b.在系統中用 regedit 使三個倉儲同步。&lt;/p&gt;
&lt;p&gt;c.設置外擴 IPv4，使遠端可通過防火牆設置進入。&lt;/p&gt;
&lt;p&gt;二.使用 PuTTY 設置連接：&lt;/p&gt;
&lt;p&gt;a.在 PuTTY Configuration 中輸入 github.com 作為 IP。&lt;/p&gt;
&lt;p&gt;b.在 Sessions 和 SSH 中設置 ppk 文件。&lt;/p&gt;
&lt;p&gt;c.將倉儲設在常用資料位置，以便隨時啟動。&lt;/p&gt;
&lt;p&gt;三.設定 SSH 資料夾：&lt;/p&gt;
&lt;p&gt;a.在 SSH 的 credentials 中設置 ppk 文件的位置。&lt;/p&gt;
&lt;p&gt;b.保存後 open，會給予一把 key，連線時無法取得。&lt;/p&gt;
&lt;p&gt;四.存取 GitHub 檔案：&lt;/p&gt;
&lt;p&gt;a.匯出檔案到可攜環境，若有對應 key 且已 open，則可用 SSH 抓取並推回倉儲。&lt;/p&gt;
&lt;p&gt;b.在近端自由啟動動態：&lt;/p&gt;
&lt;p&gt;小組成員可以獨立編輯，不受他人干擾。&lt;/p&gt;
&lt;p&gt;連接組員：&lt;/p&gt;
&lt;p&gt;改密碼後查詢 IP，並複製到 init.py 中修改，設置外部 IP 儲存，使電腦變成主機。
這樣可以使組員在 CMS 中一次完成動作。&lt;/p&gt;</content><category term="w2-41023110"></category><category term="日誌編寫 41023110"></category></entry><entry><title>2a-cd2024課程w1</title><link href="./2024-cd2024%E8%AA%B2%E7%A8%8B-w1-41023110.html" rel="alternate"></link><published>2024-02-18T00:38:00+08:00</published><updated>2024-06-21T05:08:12+08:00</updated><author><name>41023110</name></author><id>tag:None,2024-02-18:./2024-cd2024課程-w1-41023110.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;網站內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1-41023110"></category><category term="日誌編寫 41023110"></category></entry></feed>